docs = {
    "Website": "https://reactjs.org/docs/getting-started.html",
    "Cocepts" : {
        "What is it?": "JavaScript library for building user interfaces.",
        "Easy way to convert html to react?":[
            "https://unpkg.com/react@18/umd/react.development.js",
            "https://unpkg.com/react-dom@18/umd/react-dom.development.js",
            "https://unpkg.com/@babel/standalone/babel.min.js",
            "in Script element use type as text/jsx or txt/babel"
        ],
        "JSX":{
            "Full form": "Java Script Extension",
            "What is it?" : "Its a form between html and string, Looks like template but with full js power",
            "React Way":"React separates concerns with loosely coupled units called “components” that contain both logic and markup",
            "Class extends" : "React.Component render : a fuction to return Dom  ",
            "Dom Modification elelment" : "ReactDom functions: createRoot, etc",
            "Jsx": "It makes sugar coating of creating element or else you can use React.createElement instead",
            "Without JSX": "React.createElement('div',null, `Hello ${this.props.name}`)"

        },
        "How does JSX Prevents Injection Attacks":"Everything is converted to a string before being rendered. This helps prevent XSS (cross-site-scripting) attacks.",
        "How does JSX Represents Objects": "Babel compiles JSX down to React.createElement() calls.",
        "How eeficient is changing dom": "only the text node whose contents have changed gets updated by React DOM.",
        "Components":{
            "What are components": "Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.",
            "What is the use": "Elements can use user-defined components instead of native elements",
            "Props usage convention": " naming props from the component’s own point of view rather than the context in which it is being used.",
            "More Component Tips": "if a part of your UI is used several times (Button, Panel, Avatar), or is complex enough on its own (App, FeedStory, Comment), it is a good candidate to be extracted to a separate component.",
            "Strict React rule":"All React components must act like pure functions with respect to their props.",

        },
        "State and Lifecycle":{
            "What is state": "State is similar to props, but it is private and fully controlled by the component.",
            "Mounting” in React.": "Initialization of an seeing up for further repetition",
            " “unmounting” in React" : "We also want to clear that Object whenever the DOM produced by the Object is removed.",
            "LifeCycle Methods": "The componentDidMount() method runs after the component output has been rendered to the DOM.",
            "State Important Info": [
                "Do Not Modify State Directly. The only place where you can assign this.state is the constructor.",
                "State Updates May Be Asynchronous",
                "React may batch multiple setState() calls into a single update for performance.",
                "Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.",
                "props are read only and cannot be modified once set, thus any changes must be made to the state",
                "State of Parent once set can be passed to child, which keeps on in snc with the parent component",
                "this.state = {} , can be called only inside a constuctor, outside it setState() must be used",
                "The correct way to setState is to pass state and props along to as parameter. this.setState((state,props) => {})",
                "When you call setState(), React merges the object you provide into the current state, Then you can update them independently with separate setState() calls:",
                "The merging is shallow, so this.setState({comments}) leaves this.state.posts intact, but completely replaces this.state.comments.",
                "“top-down” or “unidirectional” data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components “below” them in the tree.",
                "In React apps, whether a component is stateful or stateless is considered an implementation detail of the component that may change over time. "
            ]
        },
        "Handling events with React elements":[
            "React events are named using camelCase, rather than lowercase.",
            "With JSX you pass a function as the event handler, rather than a string.",
            "ex: onClick={activateLasers}",
            "Another difference is that you cannot return false to prevent default behavior in React. You must call preventDefault explicitly. ",
            "React defines these synthetic events according to the W3C spec, so you don’t need to worry about cross-browser compatibility.",
            "Synthetic events reference guide: https://reactjs.org/docs/events.html",
            "This binding is necessary to make `this` work in the callback for In Component eventHandlers ex: this.handleClick = this.handleClick.bind(this);",
            "Inside a loop, it is common to want to pass an extra parameter to an event handler. Two Ways exist",
            "1: onClick={(e) => this.deleteRow(id, e)} , e is react event to be passed explicitly after id",
            "2.  onClick={this.deleteRow.bind(this, id)}, any argument after this is attached to event"
        ],
        "Conditional Rendering":{
           "Behaviour": "Conditional rendering in React works the same way conditions work in JavaScript. "
        },
        "Inline If with Logical && Operator":[
            "You may embed expressions in JSX by wrapping them in curly braces. This includes the JavaScript logical && operator.",
            "Another method for conditionally rendering elements inline is to use the JavaScript conditional operator condition ? true : false.",
            "In rare cases you might want a component to hide itself even though it was rendered by another component. To do this return null instead of its render output.",
        ],
        "Lists and Keys":[
            "You can build collections of elements and include them in JSX using curly braces {}.",
            " we loop through the numbers array using the JavaScript map() function. ",
            "A “key” is a special string attribute you need to include when creating lists of elements. ",
            "Keys help React identify which items have changed, are added, or are removed.",
            "The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. ",
            "A good rule of thumb is that elements inside the map() call need keys.  ",
            "JSX allows embedding any expression in curly braces so we could inline the map() result:",
        ],
        "Forms":[
            "it’s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form.",
            "The standard way to achieve this is with a technique called “controlled components”.",
            "In React, mutable state is typically kept in the state property of components, and only updated with setState().",
            "make the React state be the “single source of truth”.",
        ],
        "Controlled Component":[
            "With a controlled component, the input’s value is always driven by the React state. ",
            "you can now pass the value to other UI elements too, or reset it from other event handlers.",
            "In HTML, a <textarea> element defines its text by its children:, In React, a <textarea> uses a value attribute instead. ",
            "a form using a <textarea> can be written very similarly to a form that uses a single-line input:",
            " <textarea value={this.state.value} onChange={this.handleChange} />",
            "While using options: initially option withselected option is selected , because of the selected attribute. ",
            "React, instead of using this selected attribute, uses a value attribute on the root select tag.",
            "Overall, this makes it so that <input type=<text>, <textarea>, and <select> all work very similarly - they all accept a value attribute that you can use to implement a controlled component.",
            "You can pass an array into the value attribute, allowing you to select multiple options in a select",
            "<input type=file> : value is read-only, it is an uncontrolled component in React. ",
            "Instead of trying to sync the state between different components, you should rely on the top-down data flow.",
            "Lifting state involves writing more “boilerplate” code than two-way binding approaches, but as a benefit, it takes less work to find and isolate bugs. Since any state “lives” in some component and that component alone can change it, the surface area for bugs is greatly reduced. ", 
        ],
        "Composition vs Inheritance":[
            "React has a powerful composition model, and we recommend using composition instead of inheritance to reuse code between components.",
            "In React, this is also achieved by composition, where a more “specific” component renders a more “generic” one and configures it with props:",
            "If you want to reuse non-UI functionality between components, we suggest extracting it into a separate JavaScript module. The components may import it and use that function, object, or a class, without extending it.",
            "Props and composition give you all the flexibility you need to customize a component’s look and behavior in an explicit and safe way. "
        ],
        "Thinking in React":[
            "Break The UI Into A Component Hierarchy",
            "Use the same techniques for deciding if you should create a new function or object. ",
            "One such technique is the single responsibility principle, that is, a component should ideally only do one thing.",
            "Identify Components, then arrange them into a hierarchy. ",
            "Components that appear within another component should appear as a child in the hierarchy",
            "The easiest way is to build a version that takes your data model and renders the UI but has no interactivity.",
            "It’s best to decouple these processes because building a static version requires a lot of typing and no thinking, and adding interactivity requires a lot of thinking and not a lot of typing. ",
            "To build a static version of your app that renders your data model, you’ll want to build components that reuse other components and pass data using props.",
            "props are a way of passing data from parent to child.",
            " If you’re familiar with the concept of state, don’t use state at all to build this static version.",
            " State is reserved only for interactivity, that is, data that changes over time. ",
            "Since this is a static version of the app, you don’t need it.",
            "In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up and write tests as you build.",
            "At the end of this step, you’ll have a library of reusable components that render your data model. ",
            "React’s one-way data flow (also called one-way binding) keeps everything modular and fast.",
        ],
        "Identify The Minimal (but complete) Representation Of UI State":[
            "There are two types of “model” data in React: props and state.",
            "To make your UI interactive, you need to be able to trigger changes to your underlying data model. React achieves this with state.",
            "To build your app correctly, you first need to think of the minimal set of mutable state that your app needs.",
            " The key here is DRY: Don’t Repeat Yourself. ",
            "Figure out the absolute minimal representation of the state your application needs and compute everything else you need on-demand. ",
            {
                "which one is state":[
                    "Think of all the pieces of data in our application. ",
                    "Go through each one and figure out which one is state. Ask three questions about each piece of data:",
                    "1. Is it passed in from a parent via props? If so, it probably isn’t state.",
                    "Does it remain unchanged over time? If so, it probably isn’t state.",
                    "Can you compute it based on any other state or props in your component? If so, it isn’t state."
                ],
            },
            
        ],
        "Identify Where Your State Should Live":[
            "React is all about one-way data flow down the component hierarchy.",
            {
                "which component should own what state.":[
                        "For each piece of state in your application",
                        "Identify every component that renders something based on that state.",
                        "Find a common owner component (a single component above all the components that need the state in the hierarchy).",
                        "Either the common owner or another component higher up in the hierarchy should own the state.",
                        "If you can’t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common owner component.",
                ],

            }
        ],
        "Add Inverse Data Flow":[
            "The callbacks passed by to components will call setState(), and the app will be updated.",
            
        ]


    }
}
